"""
Django settings for this project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import datetime
from telnetlib import STATUS

from sitebase.readenv import (
        read_int_env_var,
        read_float_env_var,
        read_str_env_var,
        read_bool_env_var,
    )
from django.contrib.messages import constants as messages

# Utility for reading definition values from a file in a static directory
from .StaticWrapper import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Version (read from __init__.py)
APP_VERSION = get_field('sitebase', '__version__')
APP_RELEASE_DATE = get_field('sitebase', '__release_date__')

now = datetime.datetime.now()
APP_COPYRIGHT_YEARS = {'start': '2022', 'end': now.year}

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() in ['true', '1']

# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '[::1]',
    # get allowed host from .env
    str(os.environ.get('DJANGO_ALLOWED_HOSTS', ''))
]

# set ENABLE_SECURE_PROXY_SSL_HEADER=True in environment when SSL required
ENABLE_SECURE_PROXY_SSL_HEADER = os.environ.get("ENABLE_SSL", False)
if ENABLE_SECURE_PROXY_SSL_HEADER:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
else:
    SECURE_PROXY_SSL_HEADER = None

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'django_probes',
    'corsheaders',
    'django_tables2',
    'bootstrap4',
    # 'django_bootstrap5',
    'fontawesome_5',
    'fontawesomefree',
    'crispy_forms',
    'mysite',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sitebase.urls'

# Cross-Origin Resource Sharing
# Normally should use a whitelist  ...
CORS_ORIGIN_ALLOW_ALL = os.environ.get('CORS_ORIGIN_ALLOW_ALL', 'False').lower() in ['true', '1']

CORS_ORIGIN_WHITELIST = [
     'http://localhost:3000'
]

# session
# https://docs.djangoproject.com/en/1.11/topics/http/sessions/
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# only expire after inactivity
SESSION_SAVE_EVERY_REQUEST = True
# expire session after 15 minutes of inactivity
SESSION_COOKIE_AGE = read_int_env_var('SESSION_COOKIE_AGE', 36000)
SESSION_COOKIE_NAME = os.environ.get('SESSION_COOKIE_NAME', "app_site")

CSRF_COOKIE_NAME = f"{SESSION_COOKIE_NAME}_csrf"

TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR, ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sitebase.wsgi.application'

# Django 3.2 - define the default auto field for id's
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.postgresql"),
        "NAME": os.environ.get("SQL_DATABASE", os.path.join(BASE_DIR, "postgres")),
        "USER": os.environ.get("SQL_USER", "postgres"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "postgres"),
        "HOST": os.environ.get("SQL_HOST", "db"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# URL for redirection from login if no next page provided
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = ''

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DATE_FORMAT = 'd-m-Y'
DATE_FORMAT_UI = '%d-%m-%Y'
DATETIME_FORMAT = 'd-m-Y H:i:s'
DATETIME_FORMAT_UI = '%Y-%m-%d %H:%M'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

LOGGING_LEVEL = read_str_env_var('LOGGING_LEVEL', 'INFO')
# define the logging configuration for the different Django apps
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOGGING_LEVEL,
    },
}


DJANGO_TABLES2_TEMPLATE = 'django_tables2/bootstrap4.html'

BOOTSTRAP4 = {
    # The complete URL to the Bootstrap CSS file
    # NOTE: we want to load local JS and CSS.
    "css_url": {
        "href": StaticWrapper('mysite/theme/office-white/bootstrap.min.css'),
    },

    # The complete URL to the Bootstrap JavaScript file
    "javascript_url": {
        "url": StaticWrapper('mysite/lib/bootstrap/js/bootstrap.bundle.min.js'),
    },

    # The complete URL to the Bootstrap CSS file (None means no theme)
    "theme_url": None,

    # The URL to the jQuery JavaScript file (full)
    "jquery_url": {
        "url": StaticWrapper('mysite/lib/jquery/jquery.min.js'),
    },

    # The URL to the jQuery JavaScript file (slim)
    "jquery_slim_url": {
        "url": StaticWrapper('mysite/lib/jquery/jquery.slim.min.js'),
    },

    # The URL to the Popper.js JavaScript file (slim)
    "popper_url": {
        "url": StaticWrapper('mysite/lib/popper/popper.min.js'),
    },

    # Put JavaScript in the HEAD section of the HTML document (only relevant if you use bootstrap4.html)
    'javascript_in_head': True,

    # Include jQuery with Bootstrap JavaScript False|falsy|slim|full (default=False)
    # False - means tag bootstrap_javascript use default value - `falsy` and does not include jQuery)
    'include_jquery': False,

    # Label class to use in horizontal forms
    'horizontal_label_class': 'col-md-3',

    # Field class to use in horizontal forms
    'horizontal_field_class': 'col-md-9',

    # Set placeholder attributes to label if no placeholder is provided
    'set_placeholder': True,

    # Class to indicate required (better to set this in your Django form)
    'required_css_class': '',

    # Class to indicate error (better to set this in your Django form)
    'error_css_class': 'is-invalid',

    # Class to indicate success, meaning the field has valid input (better to set this in your Django form)
    'success_css_class': 'is-valid',

    # Renderers (only set these if you have studied the source and understand the inner workings)
    'formset_renderers':{
        'default': 'bootstrap4.renderers.FormsetRenderer',
    },
    'form_renderers': {
        'default': 'bootstrap4.renderers.FormRenderer',
    },
    'field_renderers': {
        'default': 'bootstrap4.renderers.FieldRenderer',
        'inline': 'bootstrap4.renderers.InlineFieldRenderer',
    },
}

#CRISPY TEMPLATE
CRISPY_TEMPLATE_PACK = 'uni_form'


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}
